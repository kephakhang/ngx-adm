import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer


buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url = uri("https://plugins.gradle.org/m2/") }
        maven { url = uri("https://oss.jfrog.org/artifactory/oss-snapshot-local/") }
        maven {
            name "Gradle Shadow"
            url "https://dl.bintray.com/content/johnrengelman/gradle-plugins"
        }
        google()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_plugin_version"
        classpath "com.github.johnrengelman.shadow:com.github.johnrengelman.shadow.gradle.plugin:$shadow_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_plugin_version"
        classpath "org.jetbrains.kotlin.kapt:org.jetbrains.kotlin.kapt.gradle.plugin:$kotlin_plugin_version"
        classpath "org.openapitools:openapi-generator-gradle-plugin:$openapi_generator_version"
        classpath "org.liquibase:liquibase-gradle-plugin:$liquibase_gradle_version"
    }
}

apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "org.jetbrains.kotlin.plugin.jpa"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-jpa"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "org.jetbrains.kotlin.plugin.allopen"
apply plugin: "org.jetbrains.kotlin.plugin.noarg"
apply plugin: "org.jetbrains.kotlin.plugin.serialization"
apply plugin: "org.liquibase.gradle"
apply plugin: "application"


group "com.YoungPlusSoft"
version "0.0.1"
mainClassName = "io.ktor.server.jetty.EngineMain"

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url = uri("https://plugins.gradle.org/m2/") }
    maven { url = uri("https://oss.jfrog.org/oss-snapshot-local/") }
    maven { url = uri("https://github.com/ktorio/ktor") }
    maven { url = uri("https://repo.sultanofcardio.com/artifactory/sultanofcardio") }
    maven { url = uri("https://maven.pkg.jetbrains.space/public/p/ktor/eap") }

}
// kotlin {
//     kotlinDaemonJvmArgs = [
//             "-Dfile.encoding=UTF-8",
//             "--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
//             "--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
//             "--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
//             "--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
//             "--add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED",
//             "--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
//             "--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
//             "--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
//             "--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
//             "--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"
//     ]
// }

sourceSets {
    main.kotlin.srcDirs = ["src/main/kotlin", "src/main/resources"]
}

dependencies {
    subprojects.forEach {
        implementation(project(it.path))
    }
    liquibaseRuntime "org.liquibase:liquibase-core:$liquibase_version"
    liquibaseRuntime "org.yaml:snakeyaml:1.29"
    liquibaseRuntime "info.picocli:picocli:4.6.1"
    liquibaseRuntime "mysql:mysql-connector-java:$mysql_version"

    implementation("com.google.devtools.ksp:symbol-processing-api:$ksp_version")
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:$kotlinx_version"
    implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_plugin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlin_serialization_version"

    implementation "org.hibernate:hibernate-core:$hibernate_version"
    implementation "org.hibernate:hibernate-entitymanager:$hibernate_version"
    implementation "org.hibernate:hibernate-validator:$hibernate_validator_version"
    implementation "org.hibernate:hibernate-c3p0:$hibernate_version"
    implementation "javax.validation:validation-api:2.0.1.Final"
    implementation "io.ktor:ktor-server-jetty-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-content-negotiation-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-auth-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-host-common-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-locations-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-metrics-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-webjars-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-content-negotiation-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-auth-jwt-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-locations-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-websockets-jvm:$ktor_version"
    implementation "io.ktor:ktor-server-status-pages:$ktor_version"
    implementation "io.ktor:ktor-server-call-id:$ktor_version"
    implementation "io.ktor:ktor-server-data-conversion:$ktor_version"
    implementation "io.ktor:ktor-server-compression:$ktor_version"
    implementation "io.ktor:ktor-server-caching-headers:$ktor_version"
    implementation "io.ktor:ktor-server-cors:$ktor_version"
    implementation "io.ktor:ktor-server-call-logging:$ktor_version"
    implementation "io.ktor:ktor-server-content-negotiation:$ktor_version"
    implementation "io.ktor:ktor-serialization-jackson:$ktor_version"
    implementation "io.ktor:ktor-server-forwarded-header:$ktor_version"
    implementation 'io.ktor:ktor-server-content-negotiation-jvm:2.0.2'
    implementation 'io.ktor:ktor-network-tls-jvm:2.0.2'
    testImplementation "io.ktor:ktor-server-tests-jvm:$ktor_version"
    kapt("com.querydsl:querydsl-apt:$querydsl_version:jpa")
    annotationProcessor("com.google.dagger:dagger-compiler:$dagger_version")
    implementation "com.zaxxer:HikariCP:$hikaricp_version"
    implementation "mysql:mysql-connector-java:$mysql_version"
    implementation "com.sksamuel.hoplite:hoplite-core:$hoplite_version"
    implementation "com.sksamuel.hoplite:hoplite-yaml:$hoplite_version"
    implementation "io.github.microutils:kotlin-logging:$kotlin_logging_version"
    implementation "javax.persistence:javax.persistence-api:$javax_persistence_version"
    implementation "javax.annotation:javax.annotation-api:$javax_annotation_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$fasterxml_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$fasterxml_version"
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:$fasterxml_version")

    implementation "org.hibernate.ogm:hibernate-ogm-redis:$ogm_redis_version"
    implementation "com.sultanofcardio:mailman:$mail_version"
    implementation "org.mindrot:jbcrypt:$jbcrypt_version"
    implementation "p6spy:p6spy:$p6spy_version"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "org.openapitools:openapi-generator-cli:$openapi_generator_version"

    annotationProcessor "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "io.reactivex.rxjava3:rxjava:$rxjava_version"

    implementation "io.ktor:ktor-gson:1.6.8"
    runtimeOnly "com.github.ajalt:clikt:2.8.0"


    // QueryDSL
    implementation("com.querydsl:querydsl-core:${querydsl_version}")
    implementation("com.querydsl:querydsl-jpa:${querydsl_version}")
    implementation("com.querydsl:querydsl-apt:${querydsl_version}")

    annotationProcessor("com.querydsl:querydsl-apt:${querydsl_version}")
    annotationProcessor("com.querydsl:querydsl-apt:${querydsl_version}:jpa")

    testAnnotationProcessor("com.querydsl:querydsl-apt:${querydsl_version}")
    testAnnotationProcessor("com.querydsl:querydsl-apt:${querydsl_version}:jpa")


    // https://github.com/jwtk/jjwt
    implementation("io.jsonwebtoken:jjwt-api:$jjwt_version")
    implementation("io.jsonwebtoken:jjwt-impl:$jjwt_version")
    // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms
    //runtime("org.bouncycastle:bcprov-jdk15on:$bcprov_version")
    implementation("io.jsonwebtoken:jjwt-jackson:$jjwt_version")
    // https://mvnrepository.com/artifact/org.mortbay.jetty.alpn/alpn-boot
    testImplementation "org.mortbay.jetty.alpn:alpn-boot:8.1.13.v20181017"

}


compileKotlin {
    kotlinOptions.freeCompilerArgs = ["-Xuse-experimental=kotlin.Experimental"]
//    kotlinOptions.jvmTarget = 11
}

import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

shadowJar {
    baseName = "ngx-server"
    classifier = null
    version = null
    transform(ServiceFileTransformer) {
        path = "META-INF/services"
        include "org.eclipse.jetty.http.HttpFieldPreEncoder"
    }
}

allOpen {
    annotation "javax.persistence.Entity"
    annotation "javax.persistence.MappedSuperclass"
    annotation "javax.persistence.Embeddable"
}

noArg {
    annotation "javax.persistence.Entity"
    annotation "javax.persistence.MappedSuperclass"
    annotation "javax.persistence.Embeddable"
}

task generateJks(type: JavaExec, dependsOn: "classes") {
    classpath = sourceSets.main.runtimeClasspath
    main = "com.youngplussoft.admin.common.CertificateGenerator"
}

getTasksByName("run", false).first().dependsOn("generateJks")